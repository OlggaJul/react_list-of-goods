{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","getReorderedGoods","goods","sortType","isReversed","visibleGoods","sort","g1","g2","length","localeCompare","reverse","console","log","App","state","setState","sortByLength","sortByAlphabet","className","onClick","this","type","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"yPAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAcK,SAASC,EACdC,EADK,GAGJ,IADCC,EACF,EADEA,SAAUC,EACZ,EADYA,WAENC,EAAY,YAAOH,GAqBzB,OAnBAG,EAAaC,MAAK,SAACC,EAAIC,GACrB,OAAQL,GACN,IAAK,SACH,OAAOI,EAAGE,OAASD,EAAGC,OAExB,IAAK,WACH,OAAOF,EAAGG,cAAcF,GAE1B,QAAS,OAAO,MAIhBJ,GACFC,EAAaM,UAIfC,QAAQC,IAAIV,EAAUC,GAEfC,EAQF,IAAMS,EAAb,4MACEC,MAAQ,CACNX,YAAY,EACZD,SAAU,QAHd,EAMEQ,QAAU,WACR,EAAKK,UAAS,SAACD,GAAD,MAAY,CACxBX,YAAaW,EAAMX,gBARzB,EAYEa,aAAe,WACb,EAAKD,SAAS,CAAEb,SAAU,YAb9B,EAgBEe,eAAiB,WACf,EAAKF,SAAS,CAAEb,SAAU,cAjB9B,4CAoBE,WACE,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAASC,KAAKH,eACdI,KAAK,SACLH,UAAU,0BAHZ,iCAQA,wBACEC,QAASC,KAAKJ,aACdK,KAAK,SACLH,UAAU,6BAHZ,4BAQA,wBACEC,QAASC,KAAKV,QACdW,KAAK,SACLH,UAAU,6BAHZ,qBAQA,wBACEG,KAAK,SACLH,UAAU,4BAFZ,sBAQF,6BACE,6BACGlB,EAAkBD,EAAiBqB,KAAKN,OACtCQ,KAAI,SAAAC,GAAI,OAAI,oBAAI,UAAQ,OAAZ,SAAoBA,kBA3D/C,GAAyBC,IAAMC,WC1D/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.aa123e1d.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\n// enum SortType {\n//   NONE = 'none',\n//   ALPHABET = 'alphabet',\n//   LENGTH = 'length',\n// }\n\ntype ReorderOptions = {\n  sortType: string,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((g1, g2) => {\n    switch (sortType) {\n      case 'length':\n        return g1.length - g2.length;\n\n      case 'alphabet':\n        return g1.localeCompare(g2);\n\n      default: return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\ntype State = {\n  isReversed: boolean,\n  sortType: string,\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    isReversed: false,\n    sortType: 'none',\n  };\n\n  reverse = () => {\n    this.setState((state) => ({\n      isReversed: !state.isReversed,\n    }));\n  };\n\n  sortByLength = () => {\n    this.setState({ sortType: 'length' });\n  };\n\n  sortByAlphabet = () => {\n    this.setState({ sortType: 'alphabet' });\n  };\n\n  render() {\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            onClick={this.sortByAlphabet}\n            type=\"button\"\n            className=\"button is-info is-light\"\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            onClick={this.sortByLength}\n            type=\"button\"\n            className=\"button is-success is-light\"\n          >\n            Sort by length\n          </button>\n\n          <button\n            onClick={this.reverse}\n            type=\"button\"\n            className=\"button is-warning is-light\"\n          >\n            Reverse\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        </div>\n\n        <ul>\n          <ul>\n            {getReorderedGoods(goodsFromServer, this.state)\n              .map(good => <li data-cy=\"Good\">{good}</li>)}\n          </ul>\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}